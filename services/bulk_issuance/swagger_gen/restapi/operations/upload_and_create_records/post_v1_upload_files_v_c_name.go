// Code generated by go-swagger; DO NOT EDIT.

package upload_and_create_records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"bulk_issuance/swagger_gen/models"
)

// PostV1UploadFilesVCNameHandlerFunc turns a function with the right signature into a post v1 upload files v c name handler
type PostV1UploadFilesVCNameHandlerFunc func(PostV1UploadFilesVCNameParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1UploadFilesVCNameHandlerFunc) Handle(params PostV1UploadFilesVCNameParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// PostV1UploadFilesVCNameHandler interface for that can handle valid post v1 upload files v c name params
type PostV1UploadFilesVCNameHandler interface {
	Handle(PostV1UploadFilesVCNameParams, *models.JWTClaimBody) middleware.Responder
}

// NewPostV1UploadFilesVCName creates a new http.Handler for the post v1 upload files v c name operation
func NewPostV1UploadFilesVCName(ctx *middleware.Context, handler PostV1UploadFilesVCNameHandler) *PostV1UploadFilesVCName {
	return &PostV1UploadFilesVCName{Context: ctx, Handler: handler}
}

/*PostV1UploadFilesVCName swagger:route POST /v1/uploadFiles/{VCName} uploadAndCreateRecords postV1UploadFilesVCName

upload the file and create records

*/
type PostV1UploadFilesVCName struct {
	Context *middleware.Context
	Handler PostV1UploadFilesVCNameHandler
}

func (o *PostV1UploadFilesVCName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1UploadFilesVCNameParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
