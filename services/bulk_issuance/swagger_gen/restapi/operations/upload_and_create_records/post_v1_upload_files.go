// Code generated by go-swagger; DO NOT EDIT.

package upload_and_create_records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostV1UploadFilesHandlerFunc turns a function with the right signature into a post v1 upload files handler
type PostV1UploadFilesHandlerFunc func(PostV1UploadFilesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1UploadFilesHandlerFunc) Handle(params PostV1UploadFilesParams) middleware.Responder {
	return fn(params)
}

// PostV1UploadFilesHandler interface for that can handle valid post v1 upload files params
type PostV1UploadFilesHandler interface {
	Handle(PostV1UploadFilesParams) middleware.Responder
}

// NewPostV1UploadFiles creates a new http.Handler for the post v1 upload files operation
func NewPostV1UploadFiles(ctx *middleware.Context, handler PostV1UploadFilesHandler) *PostV1UploadFiles {
	return &PostV1UploadFiles{Context: ctx, Handler: handler}
}

/*PostV1UploadFiles swagger:route POST /v1/uploadFiles uploadAndCreateRecords postV1UploadFiles

upload the file and create records

*/
type PostV1UploadFiles struct {
	Context *middleware.Context
	Handler PostV1UploadFilesHandler
}

func (o *PostV1UploadFiles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1UploadFilesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
